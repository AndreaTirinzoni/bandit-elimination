INSTRUCTIONS TO USE OUR CODE

The code is written in Julia. It is an extension of public code from existing papers: the one of LinGame (Degenne et al., 2020) which can be found here https://github.com/xuedong/LinBAI.jl; The one of FWS (Wang et al., 2021) which ca be found here https://github.com/rctzeng/NeurIPS2021-Fast-Pure-Exploration-via-Frank-Wolfe; The one for RAGE (Fiez et al., 2019) which can be found here https://github.com/fiezt/Transductive-Linear-Bandit-Code.

1. SETTING UP JULIA

Please make sure that you have installed a version of Julia later or equal to 1.6.4.
To install the required packages, simply run one of the experiment scripts by typing "julia experiments/script_name.jl" in a terminal. The script will likely return an error of missing package. Then launch "julia" in a terminal and type "import Pkg; Pkg.add("PACKAGE NAME")" to install it. Repeat this procedure until all required packages are installed.
 
PACKAGES
- JLD2
- StatsPlots
- LaTeXStrings

2. REPRODUCING OUR EXPERIMENTS

Reproducing our experiments is extremely easy. First create a sub-folder named "results" in "experiments". There is one script for each of them in the "experiments" folder which simply needs to be executed. The script will generate some .dat files with the results in the "results" sub-folder. Then, you can run the corresponding plot script in the "visualization" folder to visualize the results as in our paper. The scripts are:

 - linear_bai.jl, linear_topm.jl, and linear_osi.jl for the experiments of Table 1. They can be visualized with print_table.jl
 - unstructured_bai.jl, unstructured_topm.jl, and unstructured_osi.jl for the experiments of Table 4. They can be visualized with print_table.jl
 - linear_bai_elim.jl and linear_topm_elim.jl for the experiments of Figure 1 (left and middle) and Table 3. They can be visualized with plot_elim_algs.jl, plot_elim_full_vs_emp.jl, and print_table_elim.jl
 - linear_bai_delta.jl for the experiment of Figure 1 (right). It can be visualized with plot_delta.jl
 
There are also scripts random_linear.jl, random_unstructured.jl, and hard_linear.jl to run general tests. They can be visualized with the general script viz_experiment.jl, which simply takes as input a .dat file and plots the corresponding sample complexities, computation times, and elimination times.

NOTE: reproducing the experiments can take a long time. Most files run at least 5 algorithms, each with 3 to 5 variants and each for 100 runs, which makes roughly 2000 runs per file. To get faster results, just edit the script file to use less repetitions and to run only some desired algorithm. Our results are already in the experiments/saved_results folder.
 
3. CODE STRUCTURE

The main code is organized in different files:

- peps.jl: it implements the three pure exploration problems we consider (BAI, Top-m, and OSI)
- stopping_rules.jl: it implements LLR and Elimination stopping rules
- elimination_rules.jl: it implements full and empirical elimination for the different pure exploration problems as described in Appendix B
- sampling_rules.jl: it implements all sampling rules
- envelope.jl: utils for FWS (taken from Wang et al. code)
- utils.jl: other general utils
- regret.jl: no regret learners for LinGame
- runit.jl: functions to run an experiment
- thresholds.jl: different thresholds for stopping and/or sampling rules
- tracking.jl: tracking rules for LinGame, TaS, FWS
- experiment_helpers.jl: some functions to plot and visualize results
